import React, { useState, useEffect } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Stepper,
  Step,
  StepLabel,
  TextField,
  IconButton,
  Chip,
  Paper,
  Divider,
  Alert,
} from '@mui/material';
import {
  Add as AddIcon,
  Remove as RemoveIcon,
  ShoppingCart as CartIcon,
  LocalOffer as OfferIcon,
} from '@mui/icons-material';
import { ComboItem, MenuItem } from '../../types/menu.types';
import MenuItemSelector from './MenuItemSelector';
import PricingSummary from '../RecipeBuilder/PricingSummary';

interface ComboMealBuilderProps {
  availableItems: MenuItem[];
  onSave: (combo: ComboItem) => void;
  onCancel: () => void;
}

const steps = ['Select Items', 'Set Pricing', 'Review'];

const ComboMealBuilder: React.FC<ComboMealBuilderProps> = ({
  availableItems,
  onSave,
  onCancel,
}) => {
  const [activeStep, setActiveStep] = useState(0);
  const [comboName, setComboName] = useState('');
  const [description, setDescription] = useState('');
  const [selectedItems, setSelectedItems] = useState<MenuItem[]>([]);
  const [basePrice, setBasePrice] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [maxItems, setMaxItems] = useState(3);
  const [minItems, setMinItems] = useState(2);
  const [error, setError] = useState<string | null>(null);

  const calculateTotalPrice = () => {
    const itemsTotal = selectedItems.reduce((sum, item) => sum + item.basePrice, 0);
    return basePrice > 0 ? basePrice : itemsTotal * (1 - discount / 100);
  };

  const handleNext = () => {
    if (activeStep === 0 && selectedItems.length < minItems) {
      setError(`Please select at least ${minItems} items`);
      return;
    }
    if (activeStep === 1 && basePrice <= 0) {
      setError('Please set a valid price');
      return;
    }
    setError(null);
    setActiveStep((prev) => prev + 1);
  };

  const handleBack = () => {
    setActiveStep((prev) => prev - 1);
  };

  const handleSave = () => {
    if (!comboName) {
      setError('Please enter a combo name');
      return;
    }

    const combo: ComboItem = {
      id: Date.now().toString(), // Temporary ID, should be generated by backend
      name: comboName,
      description,
      items: selectedItems,
      price: calculateTotalPrice(),
      discount,
      maxItems,
      minItems,
    };

    onSave(combo);
  };

  const handleItemSelect = (item: MenuItem) => {
    if (selectedItems.length >= maxItems) {
      setError(`Maximum ${maxItems} items allowed`);
      return;
    }
    setSelectedItems([...selectedItems, item]);
    setError(null);
  };

  const handleItemRemove = (itemId: string) => {
    setSelectedItems(selectedItems.filter((item) => item.id !== itemId));
  };

  const renderStepContent = (step: number) => {
    switch (step) {
      case 0:
        return (
          <Box>
            <Grid container spacing={3}>
              <Grid item xs={12} md={8}>
                <MenuItemSelector
                  items={availableItems.filter(
                    (item) => !selectedItems.find((selected) => selected.id === item.id)
                  )}
                  onSelect={handleItemSelect}
                />
              </Grid>
              <Grid item xs={12} md={4}>
                <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
                  <Typography variant="h6" gutterBottom>
                    Selected Items ({selectedItems.length}/{maxItems})
                  </Typography>
                  {selectedItems.map((item) => (
                    <Card key={item.id} sx={{ mb: 1 }}>
                      <CardContent sx={{ py: 1, '&:last-child': { pb: 1 } }}>
                        <Box display="flex" alignItems="center" justifyContent="space-between">
                          <Typography variant="body2">{item.name}</Typography>
                          <Box>
                            <Typography variant="body2" color="primary" component="span">
                              ${item.basePrice.toFixed(2)}
                            </Typography>
                            <IconButton
                              size="small"
                              color="error"
                              onClick={() => handleItemRemove(item.id)}
                            >
                              <RemoveIcon />
                            </IconButton>
                          </Box>
                        </Box>
                      </CardContent>
                    </Card>
                  ))}
                </Paper>
              </Grid>
            </Grid>
          </Box>
        );

      case 1:
        return (
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    Combo Details
                  </Typography>
                  <TextField
                    fullWidth
                    label="Combo Name"
                    value={comboName}
                    onChange={(e) => setComboName(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    fullWidth
                    multiline
                    rows={3}
                    label="Description"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    margin="normal"
                  />
                  <TextField
                    fullWidth
                    type="number"
                    label="Base Price ($)"
                    value={basePrice}
                    onChange={(e) => setBasePrice(Number(e.target.value))}
                    margin="normal"
                  />
                  <TextField
                    fullWidth
                    type="number"
                    label="Discount (%)"
                    value={discount}
                    onChange={(e) => setDiscount(Number(e.target.value))}
                    margin="normal"
                    InputProps={{
                      inputProps: { min: 0, max: 100 }
                    }}
                  />
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    Combo Limits
                  </Typography>
                  <TextField
                    fullWidth
                    type="number"
                    label="Minimum Items"
                    value={minItems}
                    onChange={(e) => setMinItems(Number(e.target.value))}
                    margin="normal"
                    InputProps={{
                      inputProps: { min: 1, max: maxItems }
                    }}
                  />
                  <TextField
                    fullWidth
                    type="number"
                    label="Maximum Items"
                    value={maxItems}
                    onChange={(e) => setMaxItems(Number(e.target.value))}
                    margin="normal"
                    InputProps={{
                      inputProps: { min: minItems }
                    }}
                  />
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        );

      case 2:
        return (
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    {comboName}
                  </Typography>
                  <Typography variant="body2" color="text.secondary" paragraph>
                    {description}
                  </Typography>
                  <Divider sx={{ my: 2 }} />
                  <Typography variant="subtitle2" gutterBottom>
                    Included Items:
                  </Typography>
                  {selectedItems.map((item) => (
                    <Box key={item.id} sx={{ mb: 1 }}>
                      <Typography variant="body2">
                        • {item.name} - ${item.basePrice.toFixed(2)}
                      </Typography>
                    </Box>
                  ))}
                  <Divider sx={{ my: 2 }} />
                  <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Typography variant="subtitle1">Regular Price:</Typography>
                    <Typography variant="subtitle1">
                      ${selectedItems.reduce((sum, item) => sum + item.basePrice, 0).toFixed(2)}
                    </Typography>
                  </Box>
                  <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Typography variant="subtitle1">Combo Price:</Typography>
                    <Typography variant="h6" color="primary">
                      ${calculateTotalPrice().toFixed(2)}
                    </Typography>
                  </Box>
                  {discount > 0 && (
                    <Chip
                      icon={<OfferIcon />}
                      label={`${discount}% OFF`}
                      color="error"
                      sx={{ mt: 2 }}
                    />
                  )}
                </CardContent>
              </Card>
            </Grid>
            <Grid item xs={12} md={6}>
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    Combo Rules
                  </Typography>
                  <Typography variant="body2" paragraph>
                    • Select {minItems} to {maxItems} items
                  </Typography>
                  <Typography variant="body2" paragraph>
                    • Mix and match from available items
                  </Typography>
                  {discount > 0 && (
                    <Typography variant="body2" paragraph>
                      • Save up to {discount}% compared to regular prices
                    </Typography>
                  )}
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        );

      default:
        return null;
    }
  };

  return (
    <Box sx={{ width: '100%', p: 3 }}>
      <Paper elevation={3} sx={{ p: 3 }}>
        <Typography variant="h4" gutterBottom>
          Create Combo Meal
        </Typography>

        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        {renderStepContent(activeStep)}

        <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 3 }}>
          <Button onClick={onCancel} sx={{ mr: 1 }}>
            Cancel
          </Button>
          {activeStep > 0 && (
            <Button onClick={handleBack} sx={{ mr: 1 }}>
              Back
            </Button>
          )}
          <Button
            variant="contained"
            color="primary"
            onClick={activeStep === steps.length - 1 ? handleSave : handleNext}
            startIcon={activeStep === steps.length - 1 ? <CartIcon /> : undefined}
          >
            {activeStep === steps.length - 1 ? 'Create Combo' : 'Next'}
          </Button>
        </Box>
      </Paper>
    </Box>
  );
};

export default ComboMealBuilder;
